name: Auto Label

on:
  issues:
    types: [ opened, labeled, unlabeled, closed, edited ]
  pull_request:
    types: [ opened, labeled, unlabeled, closed, edited ]

jobs:
  auto-label:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: read

    steps:
      - name: Auto Label Issues
        uses: actions/github-script@v7
        if: github.event_name == 'issues'
        with:
          script: |
            const issue = context.payload.issue;
            const labels = issue.labels.map(l => l.name);
            
            // Auto label based on title and body content
            const title = issue.title.toLowerCase();
            const body = issue.body?.toLowerCase() || '';
            
            const newLabels = [];
            
            // Bug detection
            if (title.includes('bug') || title.includes('error') || title.includes('crash') || 
                body.includes('bug') || body.includes('error') || body.includes('crash')) {
              newLabels.push('🐛 Bug');
            }
            
            // Feature request detection
            if (title.includes('feature') || title.includes('enhancement') || title.includes('request') ||
                body.includes('feature') || body.includes('enhancement') || body.includes('request')) {
              newLabels.push('✨ Feature Request');
            }
            
            // Documentation
            if (title.includes('doc') || title.includes('documentation') ||
                body.includes('doc') || body.includes('documentation')) {
              newLabels.push('📚 Documentation');
            }
            
            // High priority
            if (title.includes('urgent') || title.includes('critical') || title.includes('high priority') ||
                body.includes('urgent') || body.includes('critical') || body.includes('high priority')) {
              newLabels.push('🚨 High Priority');
            }
            
            // Add labels if not already present
            if (newLabels.length > 0) {
              const labelsToAdd = newLabels.filter(label => !labels.includes(label));
              if (labelsToAdd.length > 0) {
                try {
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    labels: labelsToAdd
                  });
                  console.log(`Added labels: ${labelsToAdd.join(', ')}`);
                } catch (error) {
                  console.error('Error adding labels:', error);
                }
              }
            }

      - name: Auto Label PRs
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const pr = context.payload.pull_request;
            const labels = pr.labels.map(l => l.name);
            
            // Auto label based on branch name and title
            const branch = pr.head.ref.toLowerCase();
            const title = pr.title.toLowerCase();
            
            const newLabels = [];
            
            // Branch-based labeling
            if (branch.includes('fix/') || branch.includes('bugfix/')) {
              newLabels.push('🐛 Bug Fix');
            }
            
            if (branch.includes('feature/') || branch.includes('feat/')) {
              newLabels.push('✨ New Feature');
            }
            
            if (branch.includes('hotfix/')) {
              newLabels.push('🚑 Hot Fix');
            }
            
            if (branch.includes('docs/') || branch.includes('documentation/')) {
              newLabels.push('📚 Documentation');
            }
            
            // Title-based labeling
            if (title.includes('breaking') || title.includes('breaking change')) {
              newLabels.push('💥 Breaking Change');
            }
            
            // Check for develop to master PR
            const baseBranch = pr.base.ref.toLowerCase();
            const headBranch = pr.head.ref.toLowerCase();
            
            if ((headBranch === 'develop' || headBranch.includes('develop')) && 
                (baseBranch === 'master' || baseBranch === 'main')) {
              // Check if PR title contains [Release] tag
              if (pr.title.includes('[Release]') || pr.title.includes('[release]') || 
                  pr.title.toLowerCase().includes('[release]')) {
                newLabels.push('🚀 Release');
              } else {
                newLabels.push('🔄 Sync');
              }
            }
            
            // Check for other important branch flows
            if (headBranch.includes('release/') && (baseBranch === 'master' || baseBranch === 'main')) {
              newLabels.push('🚀 Release');
            }
            
            if ((headBranch === 'master' || headBranch === 'main') && baseBranch === 'develop') {
              newLabels.push('🔄 Sync');
            }
            
            // Add labels if not already present
            if (newLabels.length > 0) {
              const labelsToAdd = newLabels.filter(label => !labels.includes(label));
              if (labelsToAdd.length > 0) {
                try {
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: pr.number,
                    labels: labelsToAdd
                  });
                  console.log(`Added labels: ${labelsToAdd.join(', ')}`);
                } catch (error) {
                  console.error('Error adding labels:', error);
                }
              }
            }

      - name: Check Issue Commit References
        uses: actions/github-script@v7
        if: github.event_name == 'issues' && github.event.action == 'edited'
        with:
          script: |
            const issue = context.payload.issue;
            const labels = issue.labels.map(l => l.name);
            
            // Check if issue body contains commit references
            const body = issue.body || '';
            const commitPattern = /\b[a-f0-9]{7,40}\b/gi;
            const commitMatches = body.match(commitPattern);
            
            if (commitMatches && commitMatches.length > 0) {
              // Check if "In Progress" label is not already present
              if (!labels.includes('🔄 In Progress')) {
                try {
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    labels: ['🔄 In Progress']
                  });
                  console.log('Added "In Progress" label');
                } catch (error) {
                  console.error('Error adding In Progress label:', error);
                }
              }
            }

      - name: Handle Closed Issues
        uses: actions/github-script@v7
        if: github.event_name == 'issues' && github.event.action == 'closed'
        with:
          script: |
            const issue = context.payload.issue;
            const labels = issue.labels.map(l => l.name);
            
            try {
              // Remove "In Progress" label if present
              if (labels.includes('🔄 In Progress')) {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  name: '🔄 In Progress'
                });
                console.log('Removed "In Progress" label');
              }
            
              // Add "Done" label
              if (!labels.includes('✅ Done')) {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  labels: ['✅ Done']
                });
                console.log('Added "Done" label');
              }
            } catch (error) {
              console.error('Error handling closed issue:', error);
            }

      - name: Handle Closed PRs
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request' && github.event.action == 'closed'
        with:
          script: |
            const pr = context.payload.pull_request;
            const labels = pr.labels.map(l => l.name);
            
            try {
              // Check if PR was merged or just closed
              if (pr.merged) {
                // Remove "In Progress" label if present
                if (labels.includes('🔄 In Progress')) {
                  await github.rest.issues.removeLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: pr.number,
                    name: '🔄 In Progress'
                  });
                  console.log('Removed "In Progress" label from merged PR');
                }
            
                // Add "Merged" label
                if (!labels.includes('✅ Merged')) {
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: pr.number,
                    labels: ['✅ Merged']
                  });
                  console.log('Added "Merged" label');
                }
              } else {
                // PR was closed without merging
                // Remove "In Progress" label if present
                if (labels.includes('🔄 In Progress')) {
                  await github.rest.issues.removeLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: pr.number,
                    name: '🔄 In Progress'
                  });
                  console.log('Removed "In Progress" label from cancelled PR');
                }
            
                // Add "Cancelled" label
                if (!labels.includes('❌ Cancelled')) {
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: pr.number,
                    labels: ['❌ Cancelled']
                  });
                  console.log('Added "Cancelled" label');
                }
              }
            } catch (error) {
              console.error('Error handling closed PR:', error);
            }
