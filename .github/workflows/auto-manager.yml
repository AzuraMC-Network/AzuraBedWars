name: Auto Label

on:
  issues:
    types: [ opened, labeled, unlabeled, closed, edited ]
  pull_request:
    types: [ opened, labeled, unlabeled, closed, edited ]
  push:
    branches: [ main, master, develop ]
  issue_comment:
    types: [ created ]
  schedule:
    - cron: '0 */6 * * *'  # Run every 6 hours

jobs:
  auto-label:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: read

    steps:
      - name: Auto Label Issues
        uses: actions/github-script@v7
        if: github.event_name == 'issues'
        with:
          script: |
            const issue = context.payload.issue;
            const labels = issue.labels.map(l => l.name);
            
            // Auto label based on title and body content
            const title = issue.title.toLowerCase();
            const body = issue.body?.toLowerCase() || '';
            
            const newLabels = [];
            
            // Bug detection
            if (title.includes('bug') || title.includes('error') || title.includes('crash') || 
                body.includes('bug') || body.includes('error') || body.includes('crash')) {
              newLabels.push('üêõ Bug');
            }
            
            // Feature request detection
            if (title.includes('feature') || title.includes('enhancement') || title.includes('request') ||
                body.includes('feature') || body.includes('enhancement') || body.includes('request')) {
              newLabels.push('‚ú® Feature Request');
            }
            
            // Documentation
            if (title.includes('doc') || title.includes('documentation') ||
                body.includes('doc') || body.includes('documentation')) {
              newLabels.push('üìö Documentation');
            }
            
            // High priority
            if (title.includes('urgent') || title.includes('critical') || title.includes('high priority') ||
                body.includes('urgent') || body.includes('critical') || body.includes('high priority')) {
              newLabels.push('üö® High Priority');
            }
            
            // Add labels if not already present
            if (newLabels.length > 0) {
              const labelsToAdd = newLabels.filter(label => !labels.includes(label));
              if (labelsToAdd.length > 0) {
                try {
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    labels: labelsToAdd
                  });
                  console.log(`Added labels: ${labelsToAdd.join(', ')}`);
                } catch (error) {
                  console.error('Error adding labels:', error);
                }
              }
            }

      - name: Auto Label PRs
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const pr = context.payload.pull_request;
            const labels = pr.labels.map(l => l.name);
            
            // Auto label based on branch name and title
            const branch = pr.head.ref.toLowerCase();
            const title = pr.title.toLowerCase();
            
            const newLabels = [];
            
            // Branch-based labeling
            if (branch.includes('fix/') || branch.includes('bugfix/')) {
              newLabels.push('üêõ Bug Fix');
            }
            
            if (branch.includes('feature/') || branch.includes('feat/')) {
              newLabels.push('‚ú® New Feature');
            }
            
            if (branch.includes('hotfix/')) {
              newLabels.push('üöë Hot Fix');
            }
            
            if (branch.includes('docs/') || branch.includes('documentation/')) {
              newLabels.push('üìö Documentation');
            }
            
            // Title-based labeling
            if (title.includes('breaking') || title.includes('breaking change')) {
              newLabels.push('üí• Breaking Change');
            }
            
            // Check for develop to master PR
            const baseBranch = pr.base.ref.toLowerCase();
            const headBranch = pr.head.ref.toLowerCase();
            
            if ((headBranch === 'develop' || headBranch.includes('develop')) && 
                (baseBranch === 'master' || baseBranch === 'main')) {
              // Check if PR title contains [Release] tag
              if (pr.title.includes('[Release]') || pr.title.includes('[release]') || 
                  pr.title.toLowerCase().includes('[release]')) {
                newLabels.push('üöÄ Release');
              } else {
                newLabels.push('üîÑ Sync');
              }
            }
            
            // Check for other important branch flows
            if (headBranch.includes('release/') && (baseBranch === 'master' || baseBranch === 'main')) {
              newLabels.push('üöÄ Release');
            }
            
            if ((headBranch === 'master' || headBranch === 'main') && baseBranch === 'develop') {
              newLabels.push('üîÑ Sync');
            }
            
            // Add labels if not already present
            if (newLabels.length > 0) {
              const labelsToAdd = newLabels.filter(label => !labels.includes(label));
              if (labelsToAdd.length > 0) {
                try {
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: pr.number,
                    labels: labelsToAdd
                  });
                  console.log(`Added labels: ${labelsToAdd.join(', ')}`);
                } catch (error) {
                  console.error('Error adding labels:', error);
                }
              }
            }

      - name: Check Issue Commit References
        uses: actions/github-script@v7
        if: github.event_name == 'issues' && github.event.action == 'edited'
        with:
          script: |
            const issue = context.payload.issue;
            const labels = issue.labels.map(l => l.name);
            
            // Check if issue body contains commit references
            const body = issue.body || '';
            const commitPattern = /\b[a-f0-9]{7,40}\b/gi;
            const commitMatches = body.match(commitPattern);
            
            if (commitMatches && commitMatches.length > 0) {
              // Check if "In Progress" label is not already present
              if (!labels.includes('üîÑ In Progress')) {
                try {
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    labels: ['üîÑ In Progress']
                  });
                  console.log('Added "In Progress" label');
                } catch (error) {
                  console.error('Error adding In Progress label:', error);
                }
              }
            }

      - name: Check Push for Issue References
        uses: actions/github-script@v7
        if: github.event_name == 'push'
        with:
          script: |
            const commits = context.payload.commits || [];
            
            for (const commit of commits) {
              const message = commit.message || '';
              console.log(`Checking commit: ${commit.id} - ${message}`);
            
              // Look for issue references in commit messages (#123, fixes #123, closes #123, etc.)
              const issuePattern = /#(\d+)/g;
              let match;
            
              while ((match = issuePattern.exec(message)) !== null) {
                const issueNumber = parseInt(match[1]);
                console.log(`Found issue reference: #${issueNumber}`);
            
                try {
                  // Get issue details
                  const { data: issue } = await github.rest.issues.get({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueNumber
                  });
            
                  // Skip if issue is closed
                  if (issue.state === 'closed') {
                    console.log(`Issue #${issueNumber} is closed, skipping`);
                    continue;
                  }
            
                  const labels = issue.labels.map(l => l.name);
            
                  // Add "In Progress" label if not already present
                  if (!labels.includes('üîÑ In Progress')) {
                    await github.rest.issues.addLabels({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: issueNumber,
                      labels: ['üîÑ In Progress']
                    });
                    console.log(`Added "In Progress" label to issue #${issueNumber}`);
                  }
            
                  // Remove any response time labels since there's activity
                  const responseTimeLabels = [
                    '‚è∞ No Response 24h',
                    '‚è∞ No Response 72h', 
                    '‚è∞ No Response 1w',
                    '‚è∞ No Response 2w',
                    '‚è∞ No Response 1m'
                  ];
            
                  for (const label of responseTimeLabels) {
                    if (labels.includes(label)) {
                      try {
                        await github.rest.issues.removeLabel({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          issue_number: issueNumber,
                          name: label
                        });
                        console.log(`Removed response time label ${label} from issue #${issueNumber} due to commit activity`);
                      } catch (error) {
                        console.error(`Error removing label ${label} from issue #${issueNumber}:`, error);
                      }
                    }
                  }
                } catch (error) {
                  console.error(`Error processing issue #${issueNumber}:`, error);
                }
              }
            }

      - name: Check Issue Response Time
        uses: actions/github-script@v7
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        with:
          script: |
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 100
            });
            
            console.log(`Found ${issues.length} open issues`);
            
            for (const issue of issues) {
              // Skip pull requests
              if (issue.pull_request) continue;
            
              const labels = issue.labels.map(l => l.name);
              const issueNumber = issue.number;
            
              // Get comments for this issue
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber
              });
            
              // Get commit references to this issue
              const { data: timeline } = await github.rest.issues.listEventsForTimeline({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber
              });
            
              // Find the most recent activity (comments, commits, or issue creation)
              let lastActivityTime = new Date(issue.created_at);
            
              // Check comments
              if (comments.length > 0) {
                const lastCommentTime = new Date(comments[comments.length - 1].created_at);
                if (lastCommentTime > lastActivityTime) {
                  lastActivityTime = lastCommentTime;
                }
              }
            
              // Check timeline events for commit references
              const commitEvents = timeline.filter(event => 
                event.event === 'referenced' || 
                event.event === 'committed' ||
                (event.event === 'cross-referenced' && event.source?.type === 'issue')
              );
            
              for (const event of commitEvents) {
                const eventTime = new Date(event.created_at);
                if (eventTime > lastActivityTime) {
                  lastActivityTime = eventTime;
                }
              }
            
              const now = new Date();
              const timeDiff = now - lastActivityTime;
              const hoursDiff = timeDiff / (1000 * 60 * 60);
              const daysDiff = timeDiff / (1000 * 60 * 60 * 24);
            
              console.log(`Issue #${issueNumber}: ${hoursDiff.toFixed(1)} hours since last activity`);
            
              // Define time-based labels to add/remove
              const timeLabels = [
                { label: '‚è∞ No Response 24h', hours: 24, days: 1 },
                { label: '‚è∞ No Response 72h', hours: 72, days: 3 },
                { label: '‚è∞ No Response 1w', hours: 168, days: 7 },
                { label: '‚è∞ No Response 2w', hours: 336, days: 14 },
                { label: '‚è∞ No Response 1m', hours: 720, days: 30 }
              ];
            
              let labelsToAdd = [];
              let labelsToRemove = [];
            
              // Determine which labels should be present based on time
              for (let i = 0; i < timeLabels.length; i++) {
                const timeLabel = timeLabels[i];
                const hasLabel = labels.includes(timeLabel.label);
            
                if (hoursDiff >= timeLabel.hours) {
                  // Should have this label
                  if (!hasLabel) {
                    labelsToAdd.push(timeLabel.label);
                  }
            
                  // Remove previous time labels (progression)
                  for (let j = 0; j < i; j++) {
                    const prevLabel = timeLabels[j].label;
                    if (labels.includes(prevLabel)) {
                      labelsToRemove.push(prevLabel);
                    }
                  }
                  break; // Only add the most recent applicable label
                } else {
                  // Should not have this label
                  if (hasLabel) {
                    labelsToRemove.push(timeLabel.label);
                  }
                }
              }
            
              // Add new labels
              if (labelsToAdd.length > 0) {
                try {
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueNumber,
                    labels: labelsToAdd
                  });
                  console.log(`Issue #${issueNumber}: Added labels: ${labelsToAdd.join(', ')}`);
                } catch (error) {
                  console.error(`Error adding labels to issue #${issueNumber}:`, error);
                }
              }
            
              // Remove outdated labels
              for (const labelToRemove of labelsToRemove) {
                try {
                  await github.rest.issues.removeLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueNumber,
                    name: labelToRemove
                  });
                  console.log(`Issue #${issueNumber}: Removed label: ${labelToRemove}`);
                } catch (error) {
                  console.error(`Error removing label ${labelToRemove} from issue #${issueNumber}:`, error);
                }
              }
            }

      - name: Remove Response Time Labels on New Comment
        uses: actions/github-script@v7
        if: github.event_name == 'issue_comment' && github.event.action == 'created'
        with:
          script: |
            const issue = context.payload.issue;
            const labels = issue.labels.map(l => l.name);
            
            // Define all response time labels
            const responseTimeLabels = [
              '‚è∞ No Response 24h',
              '‚è∞ No Response 72h', 
              '‚è∞ No Response 1w',
              '‚è∞ No Response 2w',
              '‚è∞ No Response 1m'
            ];
            
            // Remove any response time labels when there's a new comment
            for (const label of responseTimeLabels) {
              if (labels.includes(label)) {
                try {
                  await github.rest.issues.removeLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    name: label
                  });
                  console.log(`Removed response time label: ${label}`);
                } catch (error) {
                  console.error(`Error removing label ${label}:`, error);
                }
              }
            }

      - name: Handle Closed Issues
        uses: actions/github-script@v7
        if: github.event_name == 'issues' && github.event.action == 'closed'
        with:
          script: |
            const issue = context.payload.issue;
            const labels = issue.labels.map(l => l.name);
            
            try {
              // Remove "In Progress" label if present
              if (labels.includes('üîÑ In Progress')) {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  name: 'üîÑ In Progress'
                });
                console.log('Removed "In Progress" label');
              }
            
              // Add "Done" label
              if (!labels.includes('‚úÖ Done')) {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  labels: ['‚úÖ Done']
                });
                console.log('Added "Done" label');
              }
            } catch (error) {
              console.error('Error handling closed issue:', error);
            }

      - name: Handle Closed PRs
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request' && github.event.action == 'closed'
        with:
          script: |
            const pr = context.payload.pull_request;
            const labels = pr.labels.map(l => l.name);
            
            try {
              // Check if PR was merged or just closed
              if (pr.merged) {
                // Remove "In Progress" label if present
                if (labels.includes('üîÑ In Progress')) {
                  await github.rest.issues.removeLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: pr.number,
                    name: 'üîÑ In Progress'
                  });
                  console.log('Removed "In Progress" label from merged PR');
                }
            
                // Add "Merged" label
                if (!labels.includes('‚úÖ Merged')) {
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: pr.number,
                    labels: ['‚úÖ Merged']
                  });
                  console.log('Added "Merged" label');
                }
              } else {
                // PR was closed without merging
                // Remove "In Progress" label if present
                if (labels.includes('üîÑ In Progress')) {
                  await github.rest.issues.removeLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: pr.number,
                    name: 'üîÑ In Progress'
                  });
                  console.log('Removed "In Progress" label from cancelled PR');
                }
            
                // Add "Cancelled" label
                if (!labels.includes('‚ùå Cancelled')) {
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: pr.number,
                    labels: ['‚ùå Cancelled']
                  });
                  console.log('Added "Cancelled" label');
                }
              }
            } catch (error) {
              console.error('Error handling closed PR:', error);
            }
